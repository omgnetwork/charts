## Default values for OmiseGO eWallet.
## This is a YAML-formatted file.
## Declare variables to be passed into your templates.


## ============================================================================
## Image configuration
## ============================================================================

image:
  repository: omisego/ewallet
  tag: "v1.1.0"
  pullPolicy: IfNotPresent

  ## Secret name to pull from a private registry.
  ##
  ## The secret must be created prior to installing this Helm chart.
  ## See also https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # imagePullSecrets:
  #   - registrySecretName


## ============================================================================
## Replication
## ============================================================================

## Number of eWallet process to spawn.
##
## When `replicaCount` is more than 1, `erlangCookie` must also
## be set in order to allow WebSockets API to work properly.
##
replicaCount: 1

## Erlang cookie for authenticating nodes.
##
## Secure random string. Value generated from `openssl rand -base64 24`
## is usually a safe choice. Only used when `replicaCount` is more than 1.
## Will be automatically generated if left blank.
##
erlangCookie: ""


## ============================================================================
## Application configuration
## ============================================================================

## Secret key for encrypting eWallet metadata.
##
## A 32-bytes base64-encoded key for encrypting user metadata in eWallet.
## Can be generated with `openssl rand -base64 32`.
##
ewalletSecretKey: ""

## Secret key for encrypting local ledger metadata.
##
## A 32-bytes base64-encoded key for encrypting ledger metadata in eWallet.
## Can be generated with `openssl rand -base64 32`
##
localLedgerSecretKey: ""

## Secret key for encrypting keychain.
##
## A 32-bytes base64-encoded key for encrypting private keys.
## Can be generated with `openssl rand -base64 32`
##
keychainSecretKey: ""

## PostgreSQL database URL for eWallet server.
##
## Must be a full URL, e.g. postgres://user:pass@host:5432/db_name
## This value is required unless `postgresql.enabled` is true.
##
ewalletDbUrl: ""

## PostgreSQL database URL for local ledger.
##
## Must be a full URL and must also be a different database from ewalletDbUrl.
## In some judiscation, it's required to store ledger data in a separate
## database than the rest of user data.
##
## This value is required unless `postgresql.enabled` is true.
##
localLedgerDbUrl: ""

## Configure the pool size for eWallet databases.
##
## This value will limit the number of connections from the eWallet Server
## to the database. Reducing this value may decrease performance.
ewalletDbPoolSize: 15

## Configure the pool size for local ledger database.
##
## This value will limit the number of connections from the local ledger
## to the database. Reducing this value may decrease performance.
localLedgerDbPoolSize: 5

## ============================================================================
## Ethereum integration
## ============================================================================

## Configure the URL to the Ethereum node
##
## Must be a full URL, e.g. http://ethereum_node:8545.
ethereumNodeUrl: ""

## ============================================================================
## Monitoring
## ============================================================================

## Sentry DSN URL for error reporting.
##
## The Sentry DSN URL as returned from the Sentry application.
## See also https://github.com/helm/charts/blob/master/stable/sentry/
##
sentryDsn: ""

## AppSignal Push API key for Application Performance Monitoring.
##
appSignalPushApiKey: ""
appSignalAppEnv: ""

## Enable VM metrics in AppSignal Performance Monitoring.
appSignalVmMetrics: false


## ============================================================================
## Service and ingress
## ============================================================================

service:
  type: ClusterIP
  clusterIP: None
  port: 4000

  ## Setup Kubernetes liveness probe and readiness probe for the service.
  ## See also https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  livenessProbe:
    initialDelaySeconds: 10
    timeoutSeconds: 5
    failureThreshold: 5

  readinessProbe:
    initialDelaySeconds: 5
    timeoutSeconds: 3
    failureThreshold: 5

## Setup endpoint for eWallet.
## See also https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: false
  annotations: {}
  path: /
  hosts:
    - example.local
  tls: []


## ============================================================================
## Service Account
## ============================================================================

## Create optional service account
## Service account name can be specified, 
## if not chart's name (`ewallet`) will be used as service account name
serviceAccount:
  create: false
  # name:


## ============================================================================
## Node configurations
## ============================================================================

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}
annotations: {}


## ============================================================================
## In-chart PostgreSQL
## ============================================================================
##
## The in-chart PostgreSQL is intended to be used for testing environment
## for production environment, please use a fault-tolerant setup such as
## Stolon (https://github.com/helm/charts/tree/master/stable/stolon)
## or managed service such as Google Cloud SQL or Amazon RDS.
##
## To use in-chart PostgreSQL, set `postgresql.enabled` to true and unset
## `ewalletDbUrl` and `localLedgerDbUrl`.
##

postgresql:

  ## Use the PostgreSQL chart dependency.
  ##
  enabled: false

  ## PostgreSQL credentials to create.
  ##
  ## Note that eWallet will create a new user with limited privileges
  ## with random password on setup if `postgresql.enabled` is true.
  ## It should be safe to leave this as default.
  ##
  postgresUser: postgres
  postgresDatabase: postgres

  ## Persistent Volume Storage configuration.
  ## See also https://kubernetes.io/docs/user-guide/persistent-volumes
  ##
  persistence:

    ## Enable PostgreSQL persistence using Persistent Volume Claims.
    ##
    enabled: true

    ## Persistent Volume Storage Class
    ## Refer to the cloud provider's documentation for available classes.
    ##
    # storageClass: ""

    ## Manually managed Persistent Volume Claim
    ##
    ## Use the given PVC instead of dynamically create a new one.
    ## The PVC must be created manually before installing this chart.
    ##
    # existingClaim:

    ## Claim access and sizes
    ##
    ## The size of the claim depends on how much traffic is expected.
    ## Note that PVC cannot be easily resized once created.
    ##
    accessMode: ReadWriteOnce
    size: 1Gi


## ============================================================================
## DEPRECATED CONFIGURATIONS
##
## These configurations are deprecated as of v1.1 and may be removed in the
## future release. However, if they are set, the eWallet Server will attempt
## to migrate to new settings format in the database.
##
## You should gradually removing them.
## ============================================================================

## Base URL for generating URLs in emails, etc.
##
## Must omit trailing slash and include the protocol.
## For example: https://www.example.com
##
baseUrl: ""

## Balance caching configuration.
##
## eWallet server will periodically compute snapshots for user balance
## to speed up operations. `balanceCachingFrequency` is in cron format and
## strategy can be either `since_begining` or `since_last_cached`.
##
## See also https://github.com/omisego/ewallet/blob/master/docs/setup/advanced/env.md#balance-caching
##
balanceCachingFrequency: ""
balanceCachingStrategy: "since_last_cached"

## Enable standalone mode.
##
## Enabling standalone will allow eWallet to work independent of an external
## integration. Setting this to false will make eWallet require integration
## with external system.
##
standalone: false

## Redirect endpoints configuration.
##
## Restrict external redirects in eWallet endpoints (e.g. email verification)
## to specific domain. Comma-separated list of prefixes e.g. http://example.com/
##
redirectPrefixes:

## Email address to send system email as
##
## All email sent from the eWallet server (e.g. invitations) will use
## this address. The address must also allowed by the SMTP server.
##
senderEmail: ""

## Email adapter cnofiguration.
##
## Must be one of smtp, local or test. Usually you would want to set this to smtp
## and configure the SMTP server configuration below.
##
emailAdapter: "smtp"

## SMTP server configuration.
##
## Credentials for SMTP server the eWallet server will use to send email from.
##
smtpHost: ""
smtpPort: ""
smtpUser: ""
smtpPassword: ""

## File Storage Adapter
##
## One of local, aws (Amazon S3), or gcs (Google Cloud Storage).
## See also the next section for credentials.
##
fileStorageAdapter: "local"

## Amazon AWS Configurations
##
awsBucket: ""
awsRegion: ""
awsAccessKeyId: ""
awsSecretAccessKey: ""

## Google Cloud Storage Configurations
##
gcsBucket: ""
gcsCredentialsPath: ""
